# –ö–û–î –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ö–†–ò–í–´–ú, –¢–ê–ö –ñ–ï –ë–û–¢ –°–û–ó–î–ê–í–ê–õ–°–Ø –ü–û–î 1-2 –ß–ï–õ–û–í–ï–ö–ê, –ù–ï –ë–û–õ–¨–®–ï, –∏–Ω–∞—á–µ –º–æ–∂–µ—Ç –ª–∞–≥–∞—Ç—å —Ç–∫ –±–æ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π

import telebot
from telebot import types
from googleapiclient.discovery import build
from config import API_KEY, CX, TG_API, ALLOWED_USERS, sites_dict
import sqlite3
import re


class Config:
    start_search_text = 'üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫'
    settings_text = '‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏'
    change_date_text = 'üìÖ –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –¥–∞—Ç–µ'
    dorks_payload_text = 'üí¨ –ü–µ–π–ª–æ–¥'
    clear_date = 'üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥–∞—Ç—É'


bot = telebot.TeleBot(TG_API)
_data = None


class Database:
    __instance = None
    DB_NAME = r"browser_history.db"
    TABLE_NAME = 'requests'

    def __new__(cls, *args, **kwargs):
        if cls.__instance is None:
            cls.__instance = super().__new__(cls)
        return cls.__instance

    @classmethod
    def create_db(cls):
        with sqlite3.connect(cls.DB_NAME) as con:
            cursor = con.cursor()
            cursor.execute(F'''
            CREATE TABLE IF NOT EXISTS {cls.TABLE_NAME} (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                title VARCHAR(256),
                link VARCHAR(256)
            );
            ''')

    @classmethod
    def insert(cls, *, title, link):
        with sqlite3.connect(cls.DB_NAME) as con:
            try:
                cursor = con.cursor()
                cursor.execute('BEGIN')
                cursor.execute(f'INSERT INTO {cls.TABLE_NAME} (title, link) VALUES (?, ?)', (title, link))
            except:
                con.rollback()
                raise

    @classmethod
    def check_visited(cls, link):
        with sqlite3.connect(cls.DB_NAME) as con:
            cur = con.cursor()
            cur.execute(f'SELECT * FROM requests WHERE link="{link}";')
            return cur.fetchall()


class DorksSearch:
    def __init__(self):
        self.db = Database()
        self.db.create_db()

    @staticmethod
    def search_links(api_key, query, num_results=5):
        service = build('customsearch', 'v1', developerKey=api_key)
        res = service.cse().list(
            q=query,
            cx=CX,
            num=num_results
        ).execute()

        return res.get('items', [])

    def main(self, query, *, num_res=10, s=1):
        api_key = API_KEY
        num_results = num_res
        results = self.search_links(api_key, query, num_results)

        total_text = ''

        for i, result in enumerate(results, start=s):
            title = result.get('title', 'No title available').replace(' ‚Äì Telegraph', '').replace(' ‚Äî Teletype', '')
            link = result.get('link', 'No link available')

            total_title = f"{title}\n{i}. {link}"
            if self.db.check_visited(link):
                total_title = f"[+] {title}\n{i}. {link}"

            total_text += total_title + '\n\n'

            self.db.insert(title=title, link=link)
        return total_text


class Keyboards:
    # SEARCH #
    search_markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    search_itembtn1 = types.KeyboardButton(Config.start_search_text)
    search_itembtn2 = types.KeyboardButton(Config.settings_text)
    search_itembtn3 = types.KeyboardButton(Config.dorks_payload_text)
    search_itembtn4 = types.KeyboardButton(Config.change_date_text)
    search_itembtn5 = types.KeyboardButton(Config.clear_date)
    search_markup.add(search_itembtn1, search_itembtn2, search_itembtn4, search_itembtn3, search_itembtn5, row_width=3)

    # BACK #
    back_markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    back_itembtn1 = types.KeyboardButton("–ù–∞–∑–∞–¥")
    back_markup.add(back_itembtn1)

    back_markup_and_date = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    back_itembtn2 = types.KeyboardButton("2023-01-01")
    back_markup_and_date.add(back_itembtn2, back_itembtn1)


@bot.message_handler(commands=['start'])
def start(message):
    if message.chat.id in ALLOWED_USERS:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=Keyboards.search_markup)


@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥" and message.chat.id in ALLOWED_USERS)
def back(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=Keyboards.search_markup)


@bot.message_handler(func=lambda message: message.text == Config.start_search_text and message.chat.id in ALLOWED_USERS)
def start_search(message):
    data = f'[–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ {_data}]' if _data else ''
    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å {data}:", reply_markup=Keyboards.back_markup)
    bot.register_next_step_handler(message, search_process_query)


def search_process_query(message):
    if message.chat.id in ALLOWED_USERS:
        query = message.text.strip()
        if query in ('0', '–ù–∞–∑–∞–¥'):
            bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –Ω–∞–∑–∞–¥.", reply_markup=Keyboards.search_markup)

        elif query in (Config.start_search_text, '–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫'):
            bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:')
            bot.register_next_step_handler(message, search_process_query)

        else:
            search = DorksSearch()
            sites_dorks = ' | '.join([f'site:{site}' for site, value in sites_dict.items() if value])
            dorks_payload = f"{f"after:{_data}" if _data else ''} ({query}|intext:({query})) {sites_dorks}"

            result = search.main(dorks_payload)
            if not result:
                bot.send_message(message.chat.id, text='–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
                bot.register_next_step_handler(message, search_process_query)
            else:
                bot.send_message(message.chat.id, text=result, disable_web_page_preview=True)
                print(result)

                bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:")
                bot.register_next_step_handler(message, search_process_query)


@bot.message_handler(func=lambda message: message.text == Config.settings_text and message.chat.id in ALLOWED_USERS)
def settings(message):
    print('settings')
    sites = ''
    for i, (site, value) in enumerate(sites_dict.items(), start=1):
        sites += f"{i}. {'üü¢' if value else 'üî¥'} | {site}\n"
    sites += '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: '
    bot.send_message(message.chat.id, "` ~ ~ - - - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - - - ~ ~ `\n"
                                      "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∞–∫–∏–µ —Å–∞–π—Ç—ã –∫–∞–∫:\n"
                     + sites, reply_markup=Keyboards.back_markup)
    bot.register_next_step_handler(message, settings_process_query)


def settings_process_query(message):
    if message.chat.id in ALLOWED_USERS:
        sites = list(sites_dict)

        query = message.text.strip()
        if query in ('0', '–ù–∞–∑–∞–¥'):
            bot.send_message(message.chat.id, text='–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...',
                             reply_markup=Keyboards.search_markup)
        elif len(sites) < int(query):
            bot.send_message(message.chat.id, text='‚ùå –¶–∏—Ñ—Ä–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è')
            settings(message)
        elif query.isdecimal() and int(query) > 0:
            site = sites[int(query) - 1]
            sites_dict[site] = not sites_dict[site]
            settings(message)


@bot.message_handler(func=lambda message: message.text == Config.change_date_text and message.chat.id in ALLOWED_USERS)
def change_data(message: types.Message):
    bot.send_message(chat_id=message.chat.id,
                     text='–ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å 2023-01-01\n–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î, –≤–º–µ—Å—Ç–µ —Å —Ç–∏—Ä–µ: ',
                     reply_markup=Keyboards.back_markup_and_date)
    bot.register_next_step_handler(message, change_date_process_query)


def change_date_process_query(message: types.Message):
    pattern = r'\d{4}-\d{2}-\d{2}'
    match = re.findall(pattern, message.text)
    if match:
        global _data
        _data = match[0]
        bot.send_message(chat_id=message.chat.id, text='–î–∞—Ç–∞ –∑–∞–¥–∞–Ω–∞, –º–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!',
                         reply_markup=Keyboards.search_markup)
    else:
        bot.send_message(chat_id=message.chat.id, text="\n–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã,"
                                                       "\n–§–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î"
                                                       "\n–ü—Ä–∏–º–µ—Ä: 2023-01-01\n",
                         reply_markup=Keyboards.search_markup)


@bot.message_handler(
    func=lambda message: message.text == Config.dorks_payload_text and message.chat.id in ALLOWED_USERS)
def get_dorks_payload(message):
    data = f'[–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ {_data}]' if _data else ''
    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å {data}:", reply_markup=Keyboards.back_markup)
    bot.register_next_step_handler(message, dorks_process_query)


def dorks_process_query(message):
    if message.chat.id in ALLOWED_USERS:
        query = message.text.strip()
        if query in ('0', '–ù–∞–∑–∞–¥'):
            bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –Ω–∞–∑–∞–¥.", reply_markup=Keyboards.search_markup)
        elif query in (Config.start_search_text, '–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫'):
            bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:')
            bot.register_next_step_handler(message, dorks_process_query)
        else:
            sites_dorks = ' | '.join([f"site:{site}" for site, value in sites_dict.items() if value])
            dorks_payload = f"{f"after:{_data}" if _data else ''} ({query}|intext:({query})) {sites_dorks}"
            bot.send_message(message.chat.id, text=dorks_payload, disable_web_page_preview=True)

            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:")
            bot.register_next_step_handler(message, dorks_process_query)


@bot.message_handler(func=lambda message: message.text == Config.clear_date and message.chat.id in ALLOWED_USERS)
def clear_date(message):
    global _data
    _data = None
    bot.send_message(chat_id=message.chat.id, text='–£—Å–ø–µ—à–Ω–æ!')


if __name__ == '__main__':
    bot.polling(skip_pending=False)

